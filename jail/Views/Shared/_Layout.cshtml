@using jail.Models
@using jail.Models.Controls
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JAIL - @ViewBag.Title</title>
    <meta property="og:title" content="@ViewBag.Title" />
    <meta property="og:description" content="JAIL page description" />
    <meta property="og:site_name" content="JAIL" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="@ViewBag.Url" />
    <meta property="og:image:alt" content="sorry, no image" />
    @{if (ViewBag.Image != null)
        {
            <meta property="og:image" content="@ViewBag.Image" />
        }
        else
        {
            <meta property="og:image" content="~/favicon.ico" />
        }
    }

    <link rel="icon" type="image/png" href="~/favicon.ico" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a id="mainLogoRef" class="navbar-brand pull-left" href="~/">
                    <img src="@Url.Content("~/Images/logo.png")" alt="JAIL" title="JAIL"/>JAIL
                </a>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Search", "Index", "Home")</li>
                    @* <li>@Html.ActionLink("Authors", "Authors", "Home")</li> *@
                    <li>@Html.ActionLink("History", "History", "Home")</li>
                    <li>@Html.ActionLink("Convert", "UploadFile", "Home")</li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li class="dropdown">
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                            Help
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                            <li>@Html.ActionLink("About", "About", "Home")</li>
                        </ul>
                    </li>
                    @{
                        var user = Request.IsAuthenticated ? HttpContext.Current.Session["User"] as UserProfile : null;
                        if (user != null)
                        {
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                    <span class="glyphicon glyphicon-user"></span>
                                    @user.Email
                                    <span class="caret"></span>
                                </a>
                                <ul class="dropdown-menu">
                                    @if (user.TimeTrackId > 0) {
                                    <li>@Html.ActionLink("Time", "Time", "Home")</li>
                                    }
                                    @if (user.UserType == UserType.Administrator)
                                    {
                                    <li>                                        
                                        <a href="@Url.Action("Users", "Home")">
                                            <span class="glyphicon glyphicon-user"></span> Users
                                        </a>
                                    </li>
                                    <li>
                                        <a href="@Url.Action("Log", "Home")">
                                            <span class="glyphicon glyphicon-alert"></span> Log
                                        </a>
                                    </li>
                                    <li class="divider"></li>
                                    }
                                    <li>
                                        <a href="@Url.Action("Favorites", "Home", new { id = user.Id })">
                                            <span class="glyphicon glyphicon-heart"></span> Favorites
                                        </a>
                                        @* @Html.ActionLink("Favorites", "Favorites", "Home", new { id = user.Id }, null) *@
                                    </li>
                                    <li>
                                        <a href="#" onclick="EditPassword(@user.Id);">
                                            <span class="glyphicon glyphicon-lock"></span> Change password
                                        </a>
                                    </li>
                                    <li class="divider"></li>
                                    <li>
                                        <a href="@Url.Action("Logout", "Home")">
                                            <span class="glyphicon glyphicon-log-out"></span> Sign out
                                        </a>
                                    </li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="disabled">
                                <a href="#"><span class="glyphicon glyphicon-user"></span> Sign Up</a>
                            </li>
                            <li>
                                <a href="@Url.Action("Login", "Home")">
                                    <span class="glyphicon glyphicon-log-in"></span> Sign in
                                </a>
                            </li>
                        }
                    }
                </ul>         
            </div>
        </div>
    </div>
    
    <div id="wrapper" class="container body-content">
        <div id="main" class="clearfix">
            @RenderBody()
        </div>
    </div>
    <div id='ajax_loader' style="position: fixed; left: calc(50% - 60px); top: calc(50% - 60px); display: none;">
        <img src="~/Images/loader.gif" />
    </div>

@Html.Partial("Controls/_ModalPopupControl", new ModalPopupControlViewModel("NotificationPopup")
                                            {
                                                OkButtonText = "OK"
                                            })
@{
    const string modalPopupId = "PasswordModalPopup";
}
    
@Html.Partial("Controls/_ModalPopupControl", new ModalPopupControlViewModel(modalPopupId)
                                             {
                                                 OkButtonText = "Create",
                                                 CloseButtonText = "Cancel",
                                                 Title = "Set password",
                                                 Template = "~/Views/Home/_PasswordChange.cshtml",
                                                 TemplateViewData = new ViewDataDictionary { Model = new ChangePasswordModel() },
                                                 IsManagePopup = true,
                                                 AfterSaveCallback = "AfterSavePasswordCallbackEvent"
                                             })

    @RenderSection("scripts", required: false)

    <script type="text/javascript">
        function ShowImage(imghref) {
            window.Helper.ShowNotificationPopup('<img width="570px" height="auto" src="' + imghref + '" />', window.HelperItem.NotificationType.Image);
        }
        function EditPassword(id) {
            var modalPopup = window.Pages.Controls["@modalPopupId"];
            var popupHolder = modalPopup.ModalId;
            $("#" + popupHolder).find(".modal-body").load("@Url.Action("PasswordChange", "Home")?id=" + id, function () {
                modalPopup.Show("Change password", "Save");
            });
        }
        AfterSavePasswordCallbackEvent = function (response) {
            var modalPopup = window.Pages.Controls["@modalPopupId"];
            if (response.id) {
                modalPopup.Close();
                window.Helper.ShowSuccess(response.message);
                if (window.RefreshUsers)
                    window.RefreshUsers();
            } else {
                $("#" + modalPopup.ModalId).find(".modal-body").html(response);
            }
        };
        function GenerateBook(bookId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Generate", "Home")',
                data: { id: bookId },
                success: function (data) {
                    if (data.message === 'Done'){
                        window.location.reload(false);
                    }
                    else{
                        setTimeout(function () { CheckConverterStatus(data.taskId); }, 1000);
                    }
                },
                error: function(data) {
                    window.Helper.ShowError('' + data);
                }
            });
        }
        function CheckConverterStatus(taskId) {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetConvertStatus", "Home")',
                data: { taskId: taskId },
                success: function (response) {
                    if (response && response.result) {
                        if (response.result.startsWith('Error')){
                            window.Helper.ShowError(response.result);
                        }
                        else{
                            window.Helper.ShowSuccess(response.output, function (){ window.location.reload(false); });
                        }
                    }
                    else{
                        if (response && response.output){
                            window.Helper.ShowCustomNotification(response.output, 'Converting, please wait...');
                        }
                        setTimeout(function () { CheckConverterStatus(taskId); }, 1000);
                    }
                },
                error: function(data) {
                    window.Helper.ShowError('' + data);
                }
            });
        }
        
        function DeliverBook(bookId) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Deliver", "Home")',
                data: { id: bookId },
                success: function (data) {
                    window.Helper.ShowSuccess('' + data);
                },
                error: function(data) {
                    window.Helper.ShowError('' + data);
                }
            });
        }
        function DeleteAllHistoryData() {
            if (!confirm("Remove everything from history?"))
                return;
            $.ajax({
                url: '@Url.Action("HistoryCleanup", "Home")',
                type: 'DELETE',
                success: function() {
                    window.location.reload(false);
                },
                error: function (response, status, error) {
                    if (error && error.length > 0)
                        window.Helper.ShowError(error);
                    else
                        window.Helper.ShowError("Failed! Something has gone wrong. Please contact a system administrator");
                }
            });
        }
        function DeleteHistoryItem(id, fileName) {
            if (!confirm("Remove '" + fileName + "' from history?"))
                return;
            $.ajax({
                url: '@Url.Action("HistoryDelete", "Home")',
                type: 'DELETE',
                data: { id: id, fileName: fileName },
                success: function() {
                    document.getElementById('book_row_' + id).remove();
                    //window.location.reload(false);
                },
                error: function (response, status, error) {
                    if (error && error.length > 0)
                        window.Helper.ShowError(error);
                    else
                        window.Helper.ShowError("Failed! Something has gone wrong. Please contact a system administrator");
                }
            });
        }
        function DeleteBookById(id) {
            if (!confirm("Delete book with Id '" + id + "'?"))
                return;
            $.ajax({
                url: '@Url.Action("Delete", "Home")',
                type: 'DELETE',
                data: { id: id },
                success: function () {
                    document.getElementById('book_row_' + id).remove();
                    // window.location.reload(false); 
                },
                error: function (response, status, error) {
                    if (error && error.length > 0)
                        window.Helper.ShowError(error);
                    else
                        window.Helper.ShowError("Failed! Something has gone wrong. Please contact a system administrator");
                }
            });
        }
        function ToggleFavorite(bookId, title) {
            var item = $('#Fav' + bookId);
            var liked = item.hasClass("glyphicon-heart");
            $.ajax({
                url: '@Url.Action("FavoriteToggle", "Home")',
                type: "GET",
                data: { bookId: bookId },
                success: function () {
                    if (liked){
                        item.removeClass('glyphicon-heart').addClass('glyphicon-heart-empty');
                        item.parent().attr('title', 'Add favorite');
                        //item.parent().data("favId", bookId);
                    }
                    else{
                        item.removeClass('glyphicon-heart-empty').addClass('glyphicon-heart');
                        item.parent().attr('title', 'Remove favorite');
                        //item.parent().data("favId", null);
                    }
                },
                error: function (response, status, error) {
                    window.Helper.ShowError(error);
                }
            });
        }
        function UpdateUserFavorites(userId, callback) {
            $.ajax({
                url: '@Url.Action("UpdateFavorites", "Home")',
                type: "GET",
                data: { userId: userId },
                success: function (data) {
                    window.Helper.ShowSuccess('' + data, callback);
                },
                error: function (response, status, error) {
                    window.Helper.ShowError(error);
                }
            });
        };
        jQuery(function ($) {
            $(document).ajaxStop(function () {
                $("#ajax_loader").hide();
            });
            $(document).ajaxStart(function () {
                $("#ajax_loader").show();
            });
        });
    </script>
    </body>
    </html>
